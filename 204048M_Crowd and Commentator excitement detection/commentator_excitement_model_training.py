# -*- coding: utf-8 -*-
"""Commentator_Excitement_Model_Training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IVEhSvtsaLOXazf0DyxEHW8RaYHPknvW
"""

# ðŸ“¦ Step 1: Install Required Libraries
!pip install tensorflow scikit-learn matplotlib pandas

# ðŸ“š Step 2: Import Libraries
import os
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam

# âœ… Step 3: Define Data Paths and Parameters
data_dir = '/content/spectrograms'
IMG_HEIGHT = 128
IMG_WIDTH = 128
BATCH_SIZE = 32

# âœ… Step 4: Image Data Loaders from Directory (no CSV needed)
train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2  # 80% train / 20% validation
)

train_generator = train_datagen.flow_from_directory(
    directory=data_dir,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training'
)

val_generator = train_datagen.flow_from_directory(
    directory=data_dir,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='validation'
)

# âœ… Step 5: Build the CNN Model
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(IMG_HEIGHT, IMG_WIDTH, 3)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(2, activation='softmax')  # 2 classes: excited & normal
])

model.compile(optimizer=Adam(learning_rate=0.0001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

# âœ… Step 6: Train the Model
epochs = 15
history = model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=epochs
)

# âœ… Step 7: Plot Accuracy and Loss
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title('Model Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title('Model Loss')
plt.legend()

plt.show()

# âœ… Step 8: Save the Model
model.save('/content/commentator_excited_model.h5')
print("âœ… Model saved as /content/commentator_excited_model.h5")