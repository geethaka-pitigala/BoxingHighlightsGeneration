# -*- coding: utf-8 -*-
"""bin_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xLgE6_jMzf_MDvn4LssuuurcE1Dx_01v
"""

# --- Import libraries ---
import pandas as pd
from google.colab import files
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
import joblib

# --- Main script to combine and train ---
def combine_and_train():
    # 1. Upload the separate feature datasets
    print("--- Please upload your two feature files ---")
    print("(e.g., 'commentator_only_features.csv' and 'crowd_only_features.csv')")
    uploaded = files.upload()
    if len(uploaded) < 2:
        print("Error: Please upload both CSV files.")
        return

    # 2. Load and combine the datasets
    print("\nLoading and combining datasets...")
    df_list = [pd.read_csv(filename) for filename in uploaded.keys()]
    combined_df = pd.concat(df_list, ignore_index=True)

    # 3. Shuffle the combined dataset (very important!)
    combined_df = combined_df.sample(frac=1, random_state=42).reset_index(drop=True)
    print(f"Combined dataset created with {len(combined_df)} total feature points.")

    # 4. Prepare data and train the model (same as before)
    print("\nPreparing data for training...")
    X = combined_df.drop('class_label', axis=1)
    y = combined_df['class_label']

    # Using a subset for training to manage RAM if needed, but let's try with all data first.
    # Adjust test_size if you still face memory issues, e.g., test_size=0.8
    X_train, _, y_train, _ = train_test_split(X, y, test_size=0.5, random_state=42, stratify=y)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)

    print("Training the SVM 'bin classifier'... (This can take a long time)")
    svm_bin_classifier = SVC(kernel='rbf', C=1.0, random_state=42, probability=True)
    svm_bin_classifier.fit(X_train_scaled, y_train)
    print("âœ… Model training complete.")

    # 5. Save the final model and scaler
    print("\nSaving final model and scaler...")
    joblib.dump(svm_bin_classifier, 'bin_classifier.pkl')
    joblib.dump(scaler, 'bin_scaler.pkl')

    print("\nDownloading final model and scaler to your computer...")
    files.download('bin_classifier.pkl')
    files.download('bin_scaler.pkl')

# --- Run the process ---
combine_and_train()